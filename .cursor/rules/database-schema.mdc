---
description: 
globs: 
alwaysApply: false
---
-- ============================================
-- 1. Extended User Profiles (Linked to auth.users)
-- ============================================
create table if not exists profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text,
  avatar_url text,
  created_at timestamp default now()
);

alter table profiles enable row level security;
create policy "Profiles: select only own profile" on profiles
  for select using (auth.uid() = id);
create policy "Profiles: insert/update only own profile" on profiles
  for insert, update using (auth.uid() = id) with check (auth.uid() = id);


-- ============================================
-- 2. Projects Table (API Documentation Projects)
-- ============================================
create table if not exists projects (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id) on delete cascade,
  title text,
  slug text unique,
  description text,
  file_type text, -- 'openapi' or 'postman'
  status text default 'processing', -- 'processing', 'ready', 'failed'
  ai_generated boolean default true,
  created_at timestamp default now(),
  updated_at timestamp default now()
);

alter table projects enable row level security;
create policy "Projects: select own projects" on projects
  for select using (auth.uid() = user_id);
create policy "Projects: insert own projects" on projects
  for insert with check (auth.uid() = user_id);
create policy "Projects: update/delete own projects" on projects
  for update, delete using (auth.uid() = user_id);


-- ============================================
-- 3. Uploaded Files Table (Store API Spec Files)
-- ============================================
create table if not exists uploaded_files (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  file_path text,
  original_name text,
  mime_type text,
  size bigint,
  uploaded_at timestamp default now()
);

alter table uploaded_files enable row level security;
create policy "UploadedFiles: select own files" on uploaded_files
  for select using (
    auth.uid() = (select user_id from projects where id = uploaded_files.project_id)
  );
create policy "UploadedFiles: insert own files" on uploaded_files
  for insert with check (
    auth.uid() = (select user_id from projects where id = uploaded_files.project_id)
  );
create policy "UploadedFiles: delete own files" on uploaded_files
  for delete using (
    auth.uid() = (select user_id from projects where id = uploaded_files.project_id)
  );


-- ============================================
-- 4. AI Jobs Table (Track AI Processing for MDX Generation)
-- ============================================
create table if not exists ai_jobs (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  status text default 'pending', -- 'pending', 'running', 'done', 'failed'
  model_used text,
  started_at timestamp,
  finished_at timestamp,
  error text
);

alter table ai_jobs enable row level security;
create policy "AIJobs: select own jobs" on ai_jobs
  for select using (
    auth.uid() = (select user_id from projects where id = ai_jobs.project_id)
  );
create policy "AIJobs: insert own jobs" on ai_jobs
  for insert with check (
    auth.uid() = (select user_id from projects where id = ai_jobs.project_id)
  );
create policy "AIJobs: update own jobs" on ai_jobs
  for update using (
    auth.uid() = (select user_id from projects where id = ai_jobs.project_id)
  );


-- ============================================
-- 5. Endpoints Table (Store Endpoint Details + Generated MDX)
-- ============================================
create table if not exists endpoints (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  method text, -- GET, POST, etc.
  path text,   -- e.g., /users/{id}
  tag text,
  summary text,
  description text,
  parameters jsonb,
  request_body jsonb,
  response_body jsonb,
  code_snippet text,
  mdx text,    -- AI-generated MDX snippet for this endpoint
  created_at timestamp default now()
);

alter table endpoints enable row level security;
create policy "Endpoints: select own endpoints" on endpoints
  for select using (
    auth.uid() = (select user_id from projects where id = endpoints.project_id)
  );
create policy "Endpoints: insert own endpoints" on endpoints
  for insert with check (
    auth.uid() = (select user_id from projects where id = endpoints.project_id)
  );
create policy "Endpoints: update/delete own endpoints" on endpoints
  for update, delete using (
    auth.uid() = (select user_id from projects where id = endpoints.project_id)
  );


-- ============================================
-- 6. Project MDX Table (Optional: Full-Project MDX Generation)
-- ============================================
create table if not exists project_mdx (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  full_mdx text,  -- Contains aggregated MDX content for entire project documentation
  generated_at timestamp default now()
);

alter table project_mdx enable row level security;
create policy "ProjectMDX: select own project MDX" on project_mdx
  for select using (
    auth.uid() = (select user_id from projects where id = project_mdx.project_id)
  );
create policy "ProjectMDX: insert/update own project MDX" on project_mdx
  for insert, update with check (
    auth.uid() = (select user_id from projects where id = project_mdx.project_id)
  );


-- ============================================
-- 7. Project Settings Table (Branding, Visibility, etc.)
-- ============================================
create table if not exists project_settings (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  theme text default 'default',
  visibility text default 'private', -- public, private, unlisted
  custom_css text,
  logo_url text,
  favicon_url text
);

alter table project_settings enable row level security;
create policy "ProjectSettings: manage own settings" on project_settings
  for select, insert, update, delete using (
    auth.uid() = (select user_id from projects where id = project_settings.project_id)
  ) with check (
    auth.uid() = (select user_id from projects where id = project_settings.project_id)
  );


-- ============================================
-- 8. Custom Domains Table (Custom Domain Configuration)
-- ============================================
create table if not exists custom_domains (
  id uuid primary key default uuid_generate_v4(),
  project_id uuid references projects(id) on delete cascade,
  domain text unique,
  verified boolean default false,
  verification_token text,
  created_at timestamp default now()
);

alter table custom_domains enable row level security;
create policy "CustomDomains: manage own custom domains" on custom_domains
  for select, insert, update, delete using (
    auth.uid() = (select user_id from projects where id = custom_domains.project_id)
  ) with check (
    auth.uid() = (select user_id from projects where id = custom_domains.project_id)
  );
